### What are theme variables?

What are theme variables?
Theme variables are special CSS variables defined using the @theme directive that influence which utility classes exist in your project.

```
@theme
```

For example, you can add a new color to your project by defining a theme variable like --color-mint-500:

```
--color-mint-500
```


```
@import "tailwindcss";@theme {  --color-mint-500: oklch(0.72 0.11 178);}
```


```
@import "tailwindcss";@theme {  --color-mint-500: oklch(0.72 0.11 178);}
```

Now you can use utility classes like bg-mint-500, text-mint-500, or fill-mint-500 in your HTML:

```
bg-mint-500
```


```
text-mint-500
```


```
fill-mint-500
```


```
<div class="bg-mint-500">  <!-- ... --></div>
```


```
<div class="bg-mint-500">  <!-- ... --></div>
```

Tailwind also generates regular CSS variables for your theme variables so you can reference your design tokens in arbitrary values or inline styles:

```
<div style="background-color: var(--color-mint-500)">  <!-- ... --></div>
```


```
<div style="background-color: var(--color-mint-500)">  <!-- ... --></div>
```

Learn more about how theme variables map to different utility classes in the theme variable namespaces documentation.

#### Why @theme instead of :root?
Why @theme instead of :root?

```
@theme
```


```
:root
```

Theme variables aren't just CSS variables â€” they also instruct Tailwind to create new utility classes that you can use in your HTML.
Since they do more than regular CSS variables, Tailwind uses special syntax so that defining theme variables is always explicit. Theme variables are also required to be defined top-level and not nested under other selectors or media queries, and using a special syntax makes it possible to enforce that.
Defining regular CSS variables with :root can still be useful in Tailwind projects when you want to define a variable that isn't meant to be connected to a utility class. Use @theme when you want a design token to map directly to a utility class, and use :root for defining regular CSS variables that shouldn't have corresponding utility classes.

```
:root
```


```
@theme
```


```
:root
```